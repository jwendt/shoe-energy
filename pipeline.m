%%%%%%%%%%%%%%%%%%
% Configurations %
%%%%%%%%%%%%%%%%%%
warning('off');

input = {'data/S1.mat';
         'data/S2.mat';
         'data/S3.mat';
         'data/S4.mat';
         'data/S5.mat';};

% The following masks are used by GetSensorGroupingsFromPedar to return the indices of
% those sensors that match the given mask shapes. Note that
% GetSensorGroupingsFromPedar automagically produces sensor groupings of size 1
% so we do not need to include those in the masks cell array
masks{1} = [1 1];

masks{2} = [1;
            1];

masks{3} = [1 1;
            1 1];

masks{4} = [1 1 1 1;
            1 1 1 1];

masks{5} = [1 1;
            1 1;
            1 1;
            1 1];

masks{6} = [1 1 0 0;
            1 1 0 0;
            1 1 1 1;
            1 1 1 1];

masks{7} = rot90(masks{6});

masks{8} = rot90(masks{7});

masks{9} = rot90(masks{8});

[groupings_list...
 groupings_matrix...
 outer_side_indices...
 inner_side_indices...
 heel_side_indices...
 toe_side_indices] = GetSensorGroupingsFromPedar(masks{:});

[dlds...
 amp...
 lateral...
 heeltoe...
 dlds_at_sensor...
 amp_at_sensor...
 land_at_sensor...
 step_starts...
 step_ends...
 test_dlds...
 test_amp...
 test_lateral...
 test_heeltoe...
 test_dlds_at_sensor...
 test_amp_at_sensor...
 test_land_at_sensor...
 test_step_starts...
 test_step_ends] = GetMetrics(input,...
                              {'left','right'},...
                              groupings_list,...
                              outer_side_indices,...
                              inner_side_indices,...
                              heel_side_indices,...
                              toe_side_indices);

% Now we have our metrics and our *_at_sensor matrices for all sensors and
% sensor groupings... create pruned graph for CICA
fprintf('Build prediction graph\n');
prediction_graph = BuildPredictionDiffGraph(dlds, ...
                                            amp, ...
                                            lateral, ...
                                            heeltoe, ...
                                            dlds_at_sensor, ...
                                            amp_at_sensor, ...
                                            land_at_sensor);

fprintf('Calculate difference thresholds\n');
[dlds_threshold ...
 amp_threshold ...
 lateral_threshold ...
 heeltoe_threshold] = CalculateDiffThresholds(prediction_graph);

fprintf('Prune graph\n');
g = PruneGraph(prediction_graph, ...
               groupings_matrix, ...
               dlds_threshold, ...
               amp_threshold, ...
               lateral_threshold, ...
               heeltoe_threshold);

% Do CICA
